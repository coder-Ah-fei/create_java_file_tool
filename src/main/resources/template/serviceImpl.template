package [[${packageName}]].service.impl;

import [[${packageName}]].form.[[${entityNameUp}]]Form;
import [[${packageName}]].repository.[[${entityNameUp}]]Repository;
import [[${packageName}]].service.[[${entityNameUp}]]Service;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Pageable;
import org.springframework.data.jpa.domain.Specification;
import org.springframework.stereotype.Service;

import javax.persistence.criteria.Predicate;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
/**
 * 描述：
 *
 * @author Administrator
 */
@Service
public class [[${entityNameUp}]]ServiceImpl implements [[${entityNameUp}]]Service {

	@Autowired
	private [[${entityNameUp}]]Repository [[${entityNameLow}]]Repository;

	/**
	 * 获取数据
	 *
	 * @param [[${entityNameLow}]]Form
	 * @return ResultMap
	 */
	@Override
	public ResultMap list[[${entityNameUp}]]s([[${entityNameUp}]]Form [[${entityNameLow}]]Form){
        Specification<[[${entityNameUp}]]> specification = (root, criteriaQuery, criteriaBuilder) -> {
//			List<Predicate> pr = new ArrayList< >();
//				if (!StringUtils.empty(articleForm.getSectionName())) {
//					Join<Object, Object> section = root.join("section");
//					pr.add(builder.equal(section.get("sectionName"), articleForm.getSectionName()));
//				}

//			if (!StringUtils.empty(litigationEnvelopeBrandForm.getBrandName())) {
//				pr.add(criteriaBuilder.equal(root.get("brandName").as(String.class), litigationEnvelopeBrandForm.getBrandName()));
//			}
//			criteriaQuery.where(pr.toArray(new Predicate[pr.size()]));

			criteriaQuery.orderBy(criteriaBuilder.desc(root.get("createDate")));
			return criteriaQuery.getRestriction();
		};
		List<[[${entityNameUp}]]> [[${entityNameLow}]]List;
		if ([[${entityNameLow}]]Form.getPageNow() == -1) {
			[[${entityNameLow}]]List = [[${entityNameLow}]]Repository.findAll(specification);
		} else {
			Pageable pageable = PageRequest.of([[${entityNameLow}]]Form.getPageNow() - 1, [[${entityNameLow}]]Form.getPageSize());
			Page<[[${entityNameUp}]]> [[${entityNameLow}]]Page = [[${entityNameLow}]]Repository.findAll(specification, pageable);
			[[${entityNameLow}]]List = [[${entityNameLow}]]Page.getContent();
		}
		List<[[${entityNameUp}]]Dto> list = new ArrayList< >();
		for ([[${entityNameUp}]] [[${entityNameLow}]] : [[${entityNameLow}]]List) {

		}
		long count = [[${entityNameLow}]]Repository.count(specification);
		Map<String, Object> map = new HashMap< >();
		map.put("list", list);
		map.put("count", count);
		return new ResultMap< >(ResultMap.SUCCESS_CODE, map);
	}

}
